#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<numeric>
#include<utility>
#include<functional>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define all(v)				((v).begin()), ((v).end())
#define sz(v)				((int)((v).size()))
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
const int OO = (int)1e6;
const double EPS = (1e-7);
int dcmp(double x, double y) {	return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;	}

#define pb					push_back
#define MP					make_pair
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
typedef long double   	  ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;














vector<int> BFS(int s, vector<vector<int> > & adjList) {
	vector<int> len(sz(adjList), OO);
	queue< pair<int, int> > q;
	q.push(MP(s, 0)), len[s] = 0;

	int cur, dep;
	while(!q.empty()) {
		pair<int, int> p = q.front();	 q.pop();
		cur = p.first, dep = p.second;

		rep(i, adjList[cur]) if (len[adjList[cur][i]] == OO)
			q.push(MP(adjList[cur][i], dep+1)), len[adjList[cur][i]] = dep+1;
	}

	return len;	//cur is the furthest node from s with depth dep
}






























/*vector<int> BFS2(int s, vector<vector<int> > & adjList) {
	vector<int> len(sz(adjList), OO);
	queue<int> q;
	q.push(s), len[s] = 0;

	int dep = 0, cur = s, sz = 1;
	for (; !q.empty(); ++dep, sz = q.size()) {
		while (sz--) {
			cur = q.front(), q.pop();
			rep(i, adjList[cur]) if (len[adjList[cur][i]] == OO)
				q.push(adjList[cur][i]), len[adjList[cur][i]] = dep+1;
		}
	}
	return len;	//cur is the furthest node from s with depth dep
}*/







/*vector<int> BFS2(int s,vector<vector<int> >&adj)
{
    vector<int>len(adj.size(),OO);
    queue<int>q;
    q.push(s);
    len[s]=0;
    int d=0;
    int l=q.size();
    for(;!q.empty();++d)
    {
        while(l--)
        {
            int cur=q.front();q.pop();
            for(auto &i:adj[cur])
            if(len[i]==OO) q.push(i),len[i]=d+1;
        }
    }
    return len;
}*/



vector<int> BFSPath(int s,int d,vector<vector<int> >&adj)
{
    vector<int>len(adj.size(),OO);
    vector<int>par(adj.size(),-1);
    bool ok=true;
    queue<int>q;
    q.push(s);len[s]=0;
    int szq=q.size(),dep=0,cur=s;
   for(;ok&&!q.empty();++dep,szq=q.size())//for to levels
   {
        while(ok&&szq--)    // levels
        {
            cur=q.front();q.pop();
            for(auto &i:adj[cur])//adj nodes for every level
            {
                 if(len[i]==OO) len[i]=dep+1,q.push(i),par[i]=cur;
                  if(i==d){ok=false;break;}
            }
         }
   }
    vector<int>path;
while(d!=-1)
{
    path.push_back(d);
    d=par[d];
}
reverse(path.begin(),path.end());
        return path;
    //return len;
}









/*vector<int> BFSPath(int s, int d, vector<vector<int> > & adjList) {
	vector<int> len(sz(adjList), OO);
	vector<int> par(sz(adjList), -1);
	queue<int> q;
	q.push(s), len[s] = 0;

	int dep = 0, cur = s, sz = 1;
	bool ok = true;

	for ( ; ok &&  !q.empty();	++dep, sz = q.size()) {
		while (ok && sz--) {
			cur = q.front(), q.pop();
			rep(i, adjList[cur]) if (len[adjList[cur][i]] == OO)
			{
				q.push(adjList[cur][i]), len[adjList[cur][i]] = dep+1, par[ adjList[cur][i] ] = cur;

				if(adjList[cur][i] == d)	// we found target no need to continue
				{
					ok = false;
					break;
				}
			}
		}
	}

	vector<int> path;
	while(d != -1) {
		path.push_back(d);
		d = par[d];
	}

	reverse( all(path) );

	return path;
}*/














// All is done by 1 weight BFS is shortest path but if the weight is not equal 1 , i will use any algorithm to count the shortest path instead of BFS
// 1-1, 1-m
// m-1 -> Reverse it, start with target and go to sources
// m-m -> Set all start nodes in Q, and find targets

// Testing a graph for bipartiteness

// Edge Split, Vertex Split Tricks



// N=5
// 3	3
// 3 - 6, 6 - 7, 7 - 8
// in(3) = 3, out(3) = 8
// sp(1, 3) = sp( in(1), out(3)) = (1, 8)


























int n,m;
char bit_map[185][185];
int arr[185][185];
queue<pair<int,int> >q;
bool is_valid(int i,int j,int n,int m){return i>=0&&j>=0&&i<n&&j<m;}
void take_input()
{
    cin>>n>>m;
    memset(arr,-1,sizeof(arr));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cin>>bit_map[i][j];
            if(bit_map[i][j]=='1')
              {
                  q.push({i,j});
                  arr[i][j]=0;
                 // cout<<endl<<arr[i][j]<<endl;
              }
        }
    }
    int timer=1,t1=0,t2=0;
    int sq=q.size();
    while(!q.empty())
    {
        sq=q.size();
        while(sq--)
        {
            t1=q.front().first,t2=q.front().second;q.pop();
            if(is_valid(t1+1,t2,n,m)&&arr[t1+1][t2]==-1) {q.push({t1+1,t2});arr[t1+1][t2]=timer;}
            if(is_valid(t1,t2+1,n,m)&&arr[t1][t2+1]==-1) {q.push({t1,t2+1});arr[t1][t2+1]=timer;}
            if(is_valid(t1-1,t2,n,m)&&arr[t1-1][t2]==-1) {q.push({t1-1,t2});arr[t1-1][t2]=timer;}
            if(is_valid(t1,t2-1,n,m)&&arr[t1][t2-1]==-1) {q.push({t1,t2-1});arr[t1][t2-1]=timer;}
        }
        timer++;
    }
}
void print__()
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cout<<arr[i][j]<<" ";
        }
        cout<<endl;
    }
}
int main()
{
int t;
cin>>t;
while(t--)
{
take_input();
print__();
}
/*#ifndef ONLINE_JUDGE
	freopen("c.in", "rt", stdin);
	//freopen(".txt", "wt", stdout);
#endif*/

/*	int n, e;

	cin>>n>>e;

	vector<vector<int> > adj(n);

	lp(i, e) {
		int from, to;
		cin>>from>>to;
		adj[from-1].push_back(to-1);
 	}

    vector<int> p = BFSPath(0, 11, adj);
	//vector<int> p=BFS(0,adj);
	rep(i, p)
		cout<<p[i]+1<<" ";*/

	return 0;
}
